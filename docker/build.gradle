plugins{
    id 'base'
}
project.evaluationDependsOn(":rundeckapp")

def providedTags = findProperty('dockerTags')?: ''

def dockerTags = [].plus(providedTags.split(',').findAll())

if(vTag == 'GA'){
    //only GA tagged with simple number
    dockerTags << vNum //x.y.z
}
if (vTag != 'SNAPSHOT'){
    //GA or other tags use resolved version
    dockerTags << resolvedVersion // x.y.z-rc1-DATE OR x.y.z-DATE for GA
}else if (dockerTags.size() == 0){
    //SNAPSHOT tag used only if nothing else is specified
    dockerTags << vTag //SNAPSHOT
}

task ensureWar {
    def rundeckapp = project(":rundeckapp")

    /* A bit dirty but will allow building container between Travis stages without rebuilding the war */
    def warFile = file(rundeckapp.war.archivePath)
    if (! warFile.exists()) {
        dependsOn rundeckapp.bootWar
    }
}

task officialBuild {
    /* A bit dirty but will allow building container between Travis stages without rebuilding the war */
    def warFile = file(project(":rundeckapp").bootWar.archiveFile)
    if (!warFile.exists()) {
        dependsOn configurations.docker
    }

    inputs.dir "official/etc"
    inputs.dir "official/lib"
    inputs.dir "official/remco"
    inputs.file "official/Dockerfile"

    def outputDir = "$buildDir/tags"

    outputs.dir outputDir

    for (tag in dockerTags) {
        outputs.file "$outputDir/$tag"
    }

    doLast {
        file(outputDir).mkdir()

        def archiveFile = configurations.docker.files.first()
        def archiveFileName = archiveFile.name

        copy {
            from archiveFile
            into "$projectDir/official/.build"
            rename "${archiveFileName}", "rundeck.war"
        }

        def args = [
            "docker",
            "build",
            "--label=com.rundeck.version=$resolvedVersion",
            "--label=com.rundeck.commit=$commit"
        ]

        for (tag in dockerTags)
            args.add("-t=rundeck/rundeck:$tag")
        
        args.add( "." )

        exec {
            workingDir "./official"
            commandLine args
        }

        for (tag in dockerTags) {
            file("$outputDir/$tag").createNewFile()
        }
        
    }

    clean {
        delete "$projectDir/official/.build"
    }
}

task officialPush {
    dependsOn officialBuild
    doLast {
        for (tag in dockerTags) {
            exec {
                commandLine "docker", "push", "rundeck/rundeck:$tag"
            }
        }
        
    }
}

task buildUbuntuBase {
    doLast {
        exec {
            workingDir "./ubuntu-base"
            commandLine "docker", "build", "-t=rundeck/ubuntu-base", "."
        }
    }
}

task pushUbuntuBase {
    dependsOn buildUbuntuBase
    doLast {
        exec {
            commandLine "docker", "push", "rundeck/ubuntu-base"
        }
    }
}
