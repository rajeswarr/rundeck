# Java Gradle CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2.1
orbs:
  docker-publish: circleci/docker-publish@0.1.6
  node: circleci/node@1.1.6
  trigger: rundeck/trigger-pipeline@0.0.5

defaults: &defaults
  working_directory: ~/repo
  environment:
    CIRCLE_PIPELINE_NUM: << pipeline.number >>

executors:
  gradle-docker:
    parameters:
      resourceClass:
        type: string
        default: medium
      RUNDECK_GRADLE_OPTS:
        type: string
        default: --no-daemon --max-workers 2 -x check publishToMavenLocal --stacktrace --info --parallel

    docker:
      - image: rundeck/ci@sha256:ef1db4074daaea2882aaaea390604cb92488289549207211d3ef7cbbaedcdf65

    resource_class: << parameters.resourceClass >>


    environment:
      CIRCLE_PIPELINE_NUM: << pipeline.number >>
      RUNDECK_GRADLE_OPTS: << parameters.RUNDECK_GRADLE_OPTS >>
      TERM: dumb
      GRADLE_OPTS: -Xmx1024m -XX:MaxPermSize=192m -Xss50m
      _JAVA_OPTIONS: "-Xmx1024m -Xms200m -Xss50m"
      BASH_ENV: ~/.bash_profile

commands:
  collect-gradle-tests:
    description: Collect JUNIT test reports from entire project
    steps:
      - run:
          name: Save test results
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/test-results/junit/ \;
          when: always
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: ~/test-results/junit
  setup-environment:
    steps:
      - run:
          name: Install packages
          command: |
            sudo apt-get update -qq
            sudo apt-get install -y jq xmlstarlet
      - run:
          name: Install aws cli
          command: pip install awscli --upgrade --user

  restore-gradle-cache:
    description: Restore Gradle cache
    steps:
      - restore_cache:
          keys:
            - v3-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - restore_cache:
          keys:
            - v3-gradle-cache-{{ .Branch }}-<<pipeline.number>>
            - v3-gradle-cache-{{ .Branch }}-
            - v3-gradle-cache-

  save-gradle-cache:
    description: Save Gradle cache
    steps:
      - save_cache:
          paths:
            - ~/.gradle/wrapper
          key: v3-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - save_cache:
          paths:
            - ~/.gradle/caches
          key: v3-gradle-cache-{{ .Branch }}-<<pipeline.number>>

  fetch-common-artifacts:
    description: Fetch common build artifacts
    steps:
      - run:
          name: Fetch Artifacts
          command: |
            source .circleci/circle-shim.sh
            fetch_common_artifacts
            pull_rdtest

  fetch-ci-resources:
    description: Fetch CI resources build artifacts
    steps:
      - run:
          name: Fetch CI Resources
          command: |
            source .circleci/circle-shim.sh
            fetch_common_resources

jobs:
  build:
    <<: *defaults
    # machine: true

    executor:
      name: gradle-docker
      RUNDECK_GRADLE_OPTS: --no-daemon --max-workers 7 -x check publishToMavenLocal --stacktrace --info --parallel --build-cache
      resourceClass: xlarge

    steps:
      - checkout
      # - node/install-node:
      #     version: '8.13.0'
      - restore-gradle-cache
      - run:
          name: Build
          command: |
            source .circleci/circle-shim.sh
            bash scripts/circle-build.sh build
      - setup_remote_docker
      - run:
          name: Build Docker Images
          command: |
            source .circleci/circle-shim.sh
            bash scripts/circle-build.sh buildDocker
            build_rdtest
      - run:
          name: Upload artifacts
          command: |
            source .circleci/circle-shim.sh
            copy_artifacts
            sync_to_s3
            sync_to_latest_s3
            seal_artifacts
      - save-gradle-cache
      - when:
          condition:
            matches: { pattern: "^main$", value: <<pipeline.git.branch>> }
          steps:
            - setup-environment
            - run:
                name: Gather artifacts
                command: |
                  source .circleci/circle-shim.sh
                  source scripts/circle-helpers.sh
                  fetch_common_artifacts
                  fetch_common_resources
                  sync_commit_to_s3
                  export VCS_URL=https://github.com/rundeck/rundeck.git
                  seal_artifacts
            - run:
                name: Publish snapshot
                command: ./gradlew publish -PsonatypeUsername="${SONATYPE_USERNAME}" -PsonatypePassword="${SONATYPE_PASSWORD}" --info
      - when:
          condition:
            matches: { pattern: "/^v.*/", value: <<pipeline.git.tag>> }
          steps:
            - setup-environment
            - run:
                name: Docker publish
                command: |
                  source .circleci/circle-shim.sh
                  source scripts/circle-helpers.sh
                  fetch_common_artifacts
                  fetch_common_resources
                  DRY_RUN=false bash scripts/circle-build.sh publish_docker

  test-gradle:
    <<: *defaults
    machine: true
    steps:
      - checkout
      - node/install-node:
          version: '12.16.3'
      - restore-gradle-cache
      - run: ./gradlew --no-daemon check --stacktrace --info --parallel --build-cache
      - collect-gradle-tests


  test-docker:
    <<: *defaults
    executor: gradle-docker

    parameters:
      command:
        description: Command that will execute the docker tests
        type: string
    steps:
      - checkout
      - setup_remote_docker
      - fetch-common-artifacts
      - run:
          name: Test
          command: |
            source .circleci/circle-shim.sh
            << parameters.command >>

  trigger-enterprise:
    docker:
      - image: cimg/node:lts
    resource_class: small
    steps:
      - trigger/trigger:
          debug: true
          branch: ${CIRCLE_BRANCH}
          token: '${CIRCLECI_API_TOKEN}'
          project-slug: 'gh/rundeckpro/rundeckpro'
          pipeline-number: '<<pipeline.number>>'

  test-docker-machine:
    <<: *defaults
    machine: true
    parameters:
      command:
        description: Command that will execute the docker tests
        type: string
    steps:
      - checkout
      - fetch-common-artifacts
      - run:
          name: Test
          command: |
            source .circleci/circle-shim.sh
            << parameters.command >>

  test-selenium:
    <<: *defaults
    machine: true
    steps:
      - checkout
      - node/install-node:
          version: '12.16.3'
      - run:
          name: Fetch Artifacts
          command: |
            source .circleci/circle-shim.sh
            pull_rundeck
      - run:
          name: Test
          command: |
            source .circleci/circle-shim.sh
            bash test/ci-test-docker-selenium.sh
      - store_artifacts:
          path: test/selenium/test_out/images
          destination: images
      - store_test_results:
          path: test/selenium/test_out/junit

  test-deps:
    <<: *defaults
    machine: true
    parameters:
      continue:
        description: Continue if check fails
        type: string
        default: 'false'
    steps:
      - checkout
      - restore-gradle-cache
      - run: ./gradlew --no-daemon dependencyCheckAggregate --stacktrace --info || << parameters.continue >>
      - store_test_results:
          path: build/owasp-reports
      - store_artifacts:
          path: build/owasp-reports
          prefix: owasp-reports

  trigger-packaging:
    <<: *defaults
    machine: true
    resource_class: small
    steps:
      - trigger/trigger:
          debug: true
          branch: 'main'
          token: '${CIRCLECI_API_TOKEN}'
          project-slug: 'gh/rundeck/packaging-core'
          pipeline-number: '<<pipeline.number>>'
  maven-publish:
    <<: *defaults
    executor:
      name: gradle-docker
      resourceClass: xlarge
    steps:
      - checkout
      - restore-gradle-cache
      - setup_remote_docker
      - fetch-common-artifacts
      - fetch-ci-resources
      - run:
          name: Publish
          command: |
            source .circleci/circle-shim.sh
            DRY_RUN=false bash scripts/circle-build.sh publish
          env:
            SIGNING_KEY_B64: ${{ secrets.SIGNING_KEY_B64 }}

stages:
  test: &stage-test
  - Gradle Test
  - Docker Test
  - Tomcat 8 API Test
  - Tomcat 9 API Test
  - API Test
  - Selenium Test
  - SSL Test
  - Ansible Test
  - LDAP Test
  - LDAP Bind Test
  - PAM Test

filters:
  all: &filter-default
    filters:
      branches:
        ignore: /pull\/[0-9]+/
      tags: {only: '/^v.*/'}

workflows:
  version: 2
  build_and_test:
    jobs:
      - build:
          <<: *filter-default
      - test-gradle:
          <<: *filter-default
          name: Gradle Test
          requires: [build]
      ## Optimistically build snapshot
      - trigger-enterprise:
          name: Enterprise Snapshot
          requires: [build]
          filters:
            branches: {only: main}
      - test-docker:
          <<: *filter-default
          name: Docker Test
          requires: [build]
          command: bash test/run-docker-tests.sh
      - test-docker:
          <<: *filter-default
          name: Tomcat 8 API Test
          requires: [build]
          command: bash test/run-docker-tomcat-tests.sh
      - test-docker:
          <<: *filter-default
          name: Tomcat 9 API Test
          requires: [build]
          command: bash test/run-docker-tomcat-tests.sh 9
      - test-docker-machine:
          <<: *filter-default
          name: API Test
          requires: [build]
          command: DOCKER_COMPOSE_SPEC=docker-compose-api-mysql.yaml bash test/run-docker-api-tests.sh
      - test-docker:
          <<: *filter-default
          name: SSL Test
          requires: [build]
          command: bash test/run-docker-ssl-tests.sh
      - test-docker:
          <<: *filter-default
          name: Ansible Test
          requires: [build]
          command: bash test/run-docker-ansible-tests.sh
      - test-docker:
          <<: *filter-default
          name: Blocklist Test
          requires: [ build ]
          command: bash test/run-docker-plugin-blocklist-test.sh
      - test-docker-machine:
          <<: *filter-default
          name: LDAP Test
          requires: [build]
          command: bash test/run-docker-ldap-tests.sh
      - test-docker-machine:
          <<: *filter-default
          name: LDAP Bind Test
          requires: [build]
          command: DOCKER_COMPOSE_SPEC=docker-compose-ldap-binding-test.yaml bash test/run-docker-ldap-tests.sh
      - test-docker:
          name: PAM Test
          requires: [build]
          command: bash test/run-docker-pam-tests.sh
      - test-selenium:
          name: Selenium Test
          requires: [build]
      - test-deps:
          name: OWASP Dependency Checks
          requires: [build]
          continue: 'true'
      - trigger-packaging:
          name: Trigger packaging-core
          requires: *stage-test
          filters:
            branches: {ignore: /.*/}
            tags: {only: /^v.*$/}
      - maven-publish:
          name: Maven Publish
          requires: *stage-test
          filters:
            branches: {ignore: /.*/}
            tags: {only: /^v.*$/}

  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - main
    jobs:
      - build:
          <<: *filter-default
      - test-gradle:
          <<: *filter-default
          name: Gradle Test
          requires: [build]
      ## Optimistically build snapshot
      - trigger-enterprise:
          name: Enterprise Snapshot
          requires: [build]
          filters:
            branches: {only: main}
      - test-docker:
          <<: *filter-default
          name: Docker Test
          requires: [build]
          command: bash test/run-docker-tests.sh
      - test-docker:
          <<: *filter-default
          name: Tomcat 8 API Test
          requires: [build]
          command: bash test/run-docker-tomcat-tests.sh
      - test-docker:
          <<: *filter-default
          name: Tomcat 9 API Test
          requires: [build]
          command: bash test/run-docker-tomcat-tests.sh 9
      - test-docker-machine:
          <<: *filter-default
          name: API Test
          requires: [build]
          command: DOCKER_COMPOSE_SPEC=docker-compose-api-mysql.yaml bash test/run-docker-api-tests.sh
      - test-docker:
          <<: *filter-default
          name: SSL Test
          requires: [build]
          command: bash test/run-docker-ssl-tests.sh
      - test-docker:
          <<: *filter-default
          name: Ansible Test
          requires: [build]
          command: bash test/run-docker-ansible-tests.sh
      - test-docker:
          <<: *filter-default
          name: Blocklist Test
          requires: [ build ]
          command: bash test/run-docker-plugin-blocklist-test.sh
      - test-docker-machine:
          <<: *filter-default
          name: LDAP Test
          requires: [build]
          command: bash test/run-docker-ldap-tests.sh
      - test-docker-machine:
          <<: *filter-default
          name: LDAP Bind Test
          requires: [build]
          command: DOCKER_COMPOSE_SPEC=docker-compose-ldap-binding-test.yaml bash test/run-docker-ldap-tests.sh
      - test-docker:
          name: PAM Test
          requires: [build]
          command: bash test/run-docker-pam-tests.sh

      - test-selenium:
            name: Selenium Test
            requires: [build]
      - test-deps:
            name: OWASP Dependency Checks
            requires: [build]
            continue: 'false'
